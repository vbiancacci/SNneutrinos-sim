#include "SNneutrinosRun.hh"
#include "G4ParticleDefinition.hh"
#include "G4Run.hh"
#include "G4UnitsTable.hh"
#include "G4AnalysisManager.hh"

SNneutrinosRun::SNneutrinosRun()
  : G4Run()
{
  fParticle             = nullptr;
  fEnergy               = -1.;
  
  fCerenkovAll          = 0.;
  fCerenkovCounter      = 0.;
  fCerenkov2            = 0.;

  fPMTAll              = 0;
  fPMTDetectionCounter = 0;
  fPMT2                = 0;
  
  fAbsorptionCounter    = 0.;

  fBoundaryCounter      = 0.;

  /*
  fScintillationCounter = 0.;
  fScintillation2       = 0.;
  */

  fWaterDetection = 0;
}

SNneutrinosRun::~SNneutrinosRun() {}

//maybe not necessary!!!!!
void SNneutrinosRun::SetPrimary(G4ParticleDefinition* particle, G4double energy)
{
  fParticle = particle;
  fEnergy   = energy;
}

void SNneutrinosRun::Merge(const G4Run* run)
{

  const SNneutrinosRun* localRun = static_cast<const SNneutrinosRun*>(run);

  fParticle = localRun->fParticle;
  fEnergy   = localRun->fEnergy;

  fCerenkovCounter += localRun->fCerenkovCounter;
  fCerenkov2 += localRun->fCerenkov2;

  fPMTDetectionCounter += localRun->fPMTDetectionCounter;
  fPMT2 += localRun->fPMT2;
  
  fAbsorptionCounter += localRun->fAbsorptionCounter;

  fBoundaryCounter += localRun->fBoundaryCounter;

  /*
  fScintillationCounter += localRun->fScintillationCounter;
  fScintillation2 += localRun->fScintillation2;
  */

  fWaterDetection += localRun->fWaterDetection;

  G4Run::Merge(run);
}

void SNneutrinosRun::EndOfRun()
{
  if(numberOfEvent == 0)
    return;
  G4double TotNbofEvents = G4double(numberOfEvent);

  //Cherenkov
  fCerenkovAll = fCerenkovCounter;
  fCerenkovCounter /= TotNbofEvents;
  fCerenkov2 /= TotNbofEvents;
  G4double rmsCerenkov = fCerenkov2 - fCerenkovCounter * fCerenkovCounter;
  if(rmsCerenkov > 0.)
    rmsCerenkov = std::sqrt(rmsCerenkov);
  else
    rmsCerenkov = 0.;

  //events in PMT
  fPMTAll = fPMTDetectionCounter;
  fPMTDetectionCounter /= TotNbofEvents;
  fPMT2 /= TotNbofEvents;
  G4double rmsPMT = fPMT2 - fPMTDetectionCounter * fPMTDetectionCounter;
  if(rmsPMT > 0.)
    rmsPMT = std::sqrt(rmsPMT);
  else
    rmsPMT = 0.;


  fAbsorptionCounter /= TotNbofEvents;
 
  fBoundaryCounter /= TotNbofEvents;


  /*
  fScintillationCounter /= TotNbofEvents;
  fScintillation2 /= TotNbofEvents;
  G4double rmsScint =
    fScintillation2 - fScintillationCounter * fScintillationCounter;
  if(rmsScint > 0.)
    rmsScint = std::sqrt(rmsScint);
  else
    rmsScint = 0.;

  G4cout << "Average number of scintillation photons created per event: "
      << fScintillationCounter << " +- " << rmsScint << G4endl;
*/


  G4int prec = G4cout.precision(3);
  G4cout << "\n ======================== run summary ======================\n";

  G4cout << "Primary particle was: " << fParticle->GetParticleName()
         << " with energy " << G4BestUnit(fEnergy, "Energy") << "." << G4endl;
  G4cout << "Number of events: " << numberOfEvent << G4endl;

  G4cout << "Average number of Cerenkov photons created per event: "
         << fCerenkovCounter << " +- " << rmsCerenkov << G4endl;
  
  G4cout << "Average number of optical photons ended in PMT per event: "
         << fPMTDetectionCounter << " +- " << rmsPMT << G4endl;

  G4cout << "Average number of optical absorption interactions per event: "
         << fAbsorptionCounter << G4endl; 

  G4cout << "Average number of optical boundary interactions per event: "
         << fBoundaryCounter << G4endl; 


  G4cout << "  Photons Generated by Cherenkov effect:          " << std::setw(8) <<  std::setprecision (15)  << fCerenkovAll << G4endl;
  G4cout << "  Photons Ended in the water tank:         " << std::setw(8) << fWaterDetection << G4endl;
  G4cout << "  Photons Ended in the PMT:                " << std::setw(8) << fPMTAll <<  G4endl;
  G4cout << "  Efficiency of Photons in PMT :           " << std::setw(8) <<  double(fPMTAll)/double(fCerenkovAll)*100 << " %" << G4endl;
 

  G4cout << G4endl;
  G4cout.precision(prec);
}
