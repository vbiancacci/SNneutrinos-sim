#include "SNneutrinosEventAction.hh"
#include "SNneutrinosRun.hh"
#include "G4Event.hh"
#include "G4RunManager.hh"
#include "G4AnalysisManager.hh"
#include "G4SystemOfUnits.hh"

SNneutrinosEventAction::SNneutrinosEventAction()
  : G4UserEventAction()
{
 event_ID = 0;
 fPMT = 0;
 fCerenkov = 0;
 efficiency = 0.;
}


SNneutrinosEventAction::~SNneutrinosEventAction() {}


void SNneutrinosEventAction::BeginOfEventAction(const G4Event*)
{
 event_ID = 0;
 fPMT = 0;
 fCerenkov = 0;
 efficiency = 0.;
}

void SNneutrinosEventAction::EndOfEventAction(const G4Event* evt)
{
  
  efficiency = G4double(fPMT)/G4double(fCerenkov)*100;
  
  if (efficiency!=0) {

    event_ID = evt->GetEventID();
    if (event_ID%100==0)
        G4cout << event_ID << G4endl;  
      //G4cout << "In the event " << event_ID << ", " << fCerenkov << " optical phtons are generated by the Cerenkov effect" << G4endl;
      //G4cout << "In the event " << event_ID << ", " << fPMT << " optical photons are detected by the PMT" <<G4endl;
      //G4cout << "In the event " << event_ID << ", " << "the PMT efficiency is " << efficiency << " %" << G4endl;  

      G4AnalysisManager* analysis = G4AnalysisManager::Instance();
      analysis->FillNtupleDColumn(12, efficiency);

      analysis->FillNtupleDColumn(0, event_ID);

      auto vertex_pos = evt->GetPrimaryVertex()->GetPosition();
      //G4cout << "In the event " << event_ID << " vertex_pos_x " << vertex_pos[0] << G4endl;
      //G4cout << "In the event " << event_ID << " vertex_pos_y " << vertex_pos[1] << G4endl;
      //G4cout << "In the event " << event_ID << " vertex_pos_z " << vertex_pos[2] << G4endl;
      analysis->FillNtupleDColumn(1, vertex_pos[0]/cm); //vertex_pos_x
      analysis->FillNtupleDColumn(2, vertex_pos[1]/cm); //vertex_pos_y
      analysis->FillNtupleDColumn(3, vertex_pos[2]/cm); //vertex_pos_z

      auto vertex_mom = evt->GetPrimaryVertex()->GetPrimary()->GetMomentumDirection();
      analysis->FillNtupleDColumn(4, vertex_mom[0]); //vertex_mom_x
      analysis->FillNtupleDColumn(5, vertex_mom[1]); //vertex_mom_y
      analysis->FillNtupleDColumn(6, vertex_mom[2]); //vertex_mom_z
      
      analysis->AddNtupleRow(0);
      
      SNneutrinosRun* run = static_cast<SNneutrinosRun*>(
        G4RunManager::GetRunManager()->GetNonConstCurrentRun());
      run->AddCerenkovRun((G4double) fCerenkov);
      run->AddPMTDetectionRun((G4double) fPMT);

  }

}
